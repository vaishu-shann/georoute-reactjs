{"ast":null,"code":"var _jsxFileName = \"H:\\\\Thewav\\\\leaflet-react\\\\src\\\\components\\\\route.js\";\nimport React, { Component } from \"react\";\nimport \"../App.css\";\nimport L from \"leaflet\";\nimport { Map, TileLayer, GeoJSON, Marker, Popup } from \"react-leaflet\";\nimport leafGreen from \"../assets/leaf-green.png\";\nimport leafRed from \"../assets/leaf-red.png\";\nimport leafOrange from \"../assets/leaf-orange.png\";\nimport leafShadow from \"../assets/leaf-shadow.png\";\nimport mapData from '../data/mock.json';\nexport default class Route extends Component {\n  constructor(props) {\n    super(props);\n    this.grenIcon = L.icon({\n      iconUrl: leafGreen,\n      shadowUrl: leafShadow,\n      iconSize: [38, 95],\n      // size of the icon\n      shadowSize: [50, 64],\n      // size of the shadow\n      iconAnchor: [22, 94],\n      // point of the icon which will correspond to marker's location\n      shadowAnchor: [4, 62],\n      // the same for the shadow\n      popupAnchor: [-3, -76]\n    });\n\n    this.componentDidMount = () => {\n      var _features$, _features$$geometry;\n\n      console.log(mapData);\n      const features = mapData.features;\n      let arr = [];\n      let obj = {};\n      let coordinates = (_features$ = features[0]) === null || _features$ === void 0 ? void 0 : (_features$$geometry = _features$.geometry) === null || _features$$geometry === void 0 ? void 0 : _features$$geometry.coordinates;\n\n      for (var i = 0; i <= coordinates.length - 1; i++) {\n        // console.log(coordinates[i])\n        console.log(\"log\", coordinates[i][0]);\n        console.log(\"lat\", coordinates[i][1]);\n        obj.latitude = coordinates[i][0];\n        obj.longitude = coordinates[i][1];\n        arr.push(obj);\n      }\n\n      console.log(arr);\n      this.setState({\n        item: arr\n      });\n    };\n\n    this.renderlist = () => {\n      return this.state.item.map(item => React.createElement(React.Fragment, null, React.createElement(Map, {\n        className: \"map\",\n        center: item.value,\n        zoom: this.state.zoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(TileLayer, {\n        attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(Marker, {\n        position: item.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(Popup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"I am a green leaf\")))));\n    };\n\n    this.state = {\n      item: [],\n      zoom: 13,\n      greenIcon: {}\n    };\n  } //   state = {\n  //     greenIcon: {\n  //       lat: 35.787449,\n  //       lng: -78.6438197,\n  //     },\n  //     redIcon: {\n  //       lat: 35.774416,\n  //       lng: -78.633271,\n  //     },\n  //     orangeIcon: {\n  //       lat: 35.77279,\n  //       lng: -78.652305,\n  //     },\n  //     zoom: 13,\n  //   };\n\n\n  render() {\n    console.log(this.state.item); // const positionRedIcon = [this.state.redIcon.lat, this.state.redIcon.lng];\n    // const positionGreenIcon = [\n    //   this.state.greenIcon.lat,\n    //   this.state.greenIcon.lng,\n    // ];\n    // const positionOrangeIcon = [\n    //   this.state.orangeIcon.lat,\n    //   this.state.orangeIcon.lng,\n    // ];\n    // console.log(mapData)\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, this.renderlist());\n  }\n\n}","map":{"version":3,"sources":["H:/Thewav/leaflet-react/src/components/route.js"],"names":["React","Component","L","Map","TileLayer","GeoJSON","Marker","Popup","leafGreen","leafRed","leafOrange","leafShadow","mapData","Route","constructor","props","grenIcon","icon","iconUrl","shadowUrl","iconSize","shadowSize","iconAnchor","shadowAnchor","popupAnchor","componentDidMount","console","log","features","arr","obj","coordinates","geometry","i","length","latitude","longitude","push","setState","item","renderlist","state","map","value","zoom","greenIcon","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../App.css\";\r\nimport L from \"leaflet\";\r\nimport { Map, TileLayer,GeoJSON, Marker, Popup } from \"react-leaflet\";\r\nimport leafGreen from \"../assets/leaf-green.png\";\r\nimport leafRed from \"../assets/leaf-red.png\";\r\nimport leafOrange from \"../assets/leaf-orange.png\";\r\nimport leafShadow from \"../assets/leaf-shadow.png\";\r\nimport mapData from '../data/mock.json';\r\n\r\nexport default class Route extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             item:[],\r\n             zoom:13,\r\n             greenIcon:{}\r\n        }\r\n    }\r\n    \r\n    \r\n//   state = {\r\n//     greenIcon: {\r\n//       lat: 35.787449,\r\n//       lng: -78.6438197,\r\n//     },\r\n//     redIcon: {\r\n//       lat: 35.774416,\r\n//       lng: -78.633271,\r\n//     },\r\n//     orangeIcon: {\r\n//       lat: 35.77279,\r\n//       lng: -78.652305,\r\n//     },\r\n//     zoom: 13,\r\n//   };\r\n\r\n  grenIcon = L.icon({\r\n    iconUrl: leafGreen,\r\n    shadowUrl: leafShadow,\r\n    iconSize: [38, 95], // size of the icon\r\n    shadowSize: [50, 64], // size of the shadow\r\n    iconAnchor: [22, 94], // point of the icon which will correspond to marker's location\r\n    shadowAnchor: [4, 62], // the same for the shadow\r\n    popupAnchor: [-3, -76],\r\n  });\r\n\r\n//   redIcon = L.icon({\r\n//     iconUrl: leafRed,\r\n//     shadowUrl: leafShadow,\r\n//     iconSize: [38, 95], // size of the icon\r\n//     shadowSize: [50, 64], // size of the shadow\r\n//     iconAnchor: [22, 94], // point of the icon which will correspond to marker's location\r\n//     shadowAnchor: [4, 62], // the same for the shadow\r\n//     popupAnchor: [-3, -86],\r\n//   });\r\n\r\n//   orangeIcon = L.icon({\r\n//     iconUrl: leafOrange,\r\n//     shadowUrl: leafShadow,\r\n//     iconSize: [38, 95], // size of the icon\r\n//     shadowSize: [50, 64], // size of the shadow\r\n//     iconAnchor: [22, 94], // point of the icon which will correspond to marker's location\r\n//     shadowAnchor: [4, 62], // the same for the shadow\r\n//     popupAnchor: [-3, -86],\r\n//   });\r\n  componentDidMount=()=>{\r\n    console.log(mapData)\r\n    const {features}=mapData\r\n    let arr=[]\r\n    let obj={}\r\n    let coordinates=features[0]?.geometry?.coordinates\r\n    for(var i=0;i<=coordinates.length-1;i++){\r\n        // console.log(coordinates[i])\r\n        console.log(\"log\",coordinates[i][0])\r\n        console.log(\"lat\",coordinates[i][1])\r\n        obj.latitude=coordinates[i][0]\r\n        obj.longitude=coordinates[i][1]\r\n        arr.push(obj)\r\n    }\r\n    console.log(arr)\r\n    this.setState({item:arr})\r\n  }\r\n  renderlist=()=>{\r\n      return this.state.item.map(item=>(\r\n          <>\r\n\r\n          <Map className=\"map\" center={item.value} zoom={this.state.zoom}>\r\n          <TileLayer\r\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n           <Marker position={item.value} >\r\n            <Popup>I am a green leaf</Popup>\r\n          </Marker>\r\n          </Map>\r\n          </>\r\n      ))\r\n  }\r\n  render() {\r\n      console.log(this.state.item)\r\n    // const positionRedIcon = [this.state.redIcon.lat, this.state.redIcon.lng];\r\n    // const positionGreenIcon = [\r\n    //   this.state.greenIcon.lat,\r\n    //   this.state.greenIcon.lng,\r\n    // ];\r\n    // const positionOrangeIcon = [\r\n    //   this.state.orangeIcon.lat,\r\n    //   this.state.orangeIcon.lng,\r\n    // ];\r\n    // console.log(mapData)\r\n    return (\r\n      <div>\r\n        {/* <Map className=\"map\" center={positionGreenIcon} zoom={this.state.zoom}>\r\n          <TileLayer\r\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n        <GeoJSON data={mapData.features}/>\r\n \r\n       <Marker position={positionGreenIcon} icon={this.grenIcon}>\r\n            <Popup>I am a green leaf</Popup>\r\n          </Marker>\r\n          <Marker position={positionRedIcon} icon={this.redIcon}>\r\n            <Popup>I am a red leaf</Popup>\r\n          </Marker>\r\n          <Marker position={positionOrangeIcon} icon={this.orangeIcon}>\r\n            <Popup>I am an orange leaf</Popup>\r\n          </Marker> \r\n        </Map> */}\r\n        {this.renderlist()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}